// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String            @id @default(uuid())
  username               String?           @unique
  name                   String?
  email                  String            @unique
  role                   Role              @default(USER)
  avatarUrl              String?
  bio                    String?
  languagesKnown         Language[]        @relation("KnownLanguages")
  languagesLearn         Language[]        @relation("LearnLanguages")
  posts                  Post[]
  comments               Comment[]
  likes                  Like[]
  notifications          Notification[]    @relation("UserNotifications")
  sentActions            Notification[]    @relation("UserActor")
  sentMessages           Message[]         @relation("SentMessages")
  receivedMessages       Message[]         @relation("ReceivedMessages")
  chatParticipants       ChatParticipant[]
  sentFriendRequests     FriendRequest[]   @relation("SentRequests")
  receivedFriendRequests FriendRequest[]   @relation("ReceivedRequests")
  isOnline               Boolean           @default(false)
  lastOnline             DateTime? 
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  isVerified             Boolean           @default(false)
}

model Language {
  id         String @id @default(uuid())
  name       String
  level      String
  code       String @default("")
  knownBy    User[] @relation("KnownLanguages")
  learningBy User[] @relation("LearnLanguages")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model Post {
  id            String         @id @default(uuid())
  authorId      String
  author        User           @relation(fields: [authorId], references: [id])
  content       String
  imageUrl      String?
  allowComments Boolean        @default(true)
  likes         Like[]
  comments      Comment[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Comment {
  id            String         @id @default(uuid())
  postId        String
  post          Post           @relation(fields: [postId], references: [id])
  authorId      String
  author        User           @relation(fields: [authorId], references: [id])
  content       String
  notifications Notification[]
  createdAt     DateTime       @default(now())
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model Notification {
  id          String           @id @default(uuid())
  type        NotificationType
  message     String
  recipient   User             @relation("UserNotifications", fields: [recipientId], references: [id])
  recipientId String
  actor       User             @relation("UserActor", fields: [actorId], references: [id])
  actorId     String
  post        Post?            @relation(fields: [postId], references: [id])
  postId      String?
  comment     Comment?         @relation(fields: [commentId], references: [id])
  commentId   String?
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MESSAGE
}

model Chat {
  id           String            @id @default(uuid())
  participants ChatParticipant[]
  messages     Message[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model ChatParticipant {
  id     String @id @default(uuid())
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([chatId, userId])
}

model Message {
  id         String      @id @default(uuid())
  senderId   String
  receiverId String
  type       MessageType @default(TEXT)
  content    String?
  mediaUrl   String?
  createdAt  DateTime    @default(now())
  sender     User        @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User        @relation("ReceivedMessages", fields: [receiverId], references: [id])
  read       Boolean     @default(false)
  chat       Chat        @relation(fields: [chatId], references: [id])
  chatId     String
}

enum MessageType {
  TEXT
  IMAGE
  VOICE
}

model FriendRequest {
  id         String                @id @default(uuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus   @default(PENDING)
  createdAt  DateTime              @default(now())
  sender     User                  @relation("SentRequests", fields: [senderId], references: [id])
  receiver   User                  @relation("ReceivedRequests", fields: [receiverId], references: [id])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}